4000 0000 ; "DUMPER<"		;	DUMPER      <
4001 0000 ; "DUMP_INI<"		;	DUMP_INI    <
4002 0000 ; "DUMP_TAM<"		;	DUMP_TAM    <
4003 0000 ; "DUMP_UL<"		;	DUMP_UL     <
4004 0000 ; "DUMP_BL<"		;	DUMP_BL     <
4005 0000 ; "DUMP_EXE<"		;	DUMP_EXE    <

4006 0000 ; "LOADER<"		;	LOADER      <
4007 0000 ; "LOADER_UL<"		;	LOADER_UL   <

4008 0000 ; "CHTOUI<"		;	CHTOUI      <
4009 0000 ; "DP1<"		;	DP1         <
4010 0000 ; "DP2<"		;	DP2         <
4011 0000 ; "DP3<"		;	DP3         <

4012 0000 ; "PACK<"		;	PACK        <

4013 0000 ; "UM<"		;	UM          <
4014 0000 ; "CINCO<"		;	CINCO       < 


2018 0000 ; "BATCH>"		;	BATCH >

				;	              &  /0000 ;

8000 2f2f		;	C_DB_SLASH    K  /2F2F        ; //
8002 200a		;	C_EOL         K  /200A        ; space + EOL 
8004 2020		;	C_DB_SP       K  /2020        ; space + space
8006 2f2a		;	C_EOF         K  /2F2A        ; /*
8008 4a42		;	C_JB          K  /4A42        ; JB
800a 4455		;	C_DU          K  /4455        ; DU
800c 4c4f		;	C_LO          K  /4C4F        ; LO

800e d000		;	C_GD          K  /D000        ; GD
8010 0000		;	VARTMP        K  /0000        ; variavel temporaria
8012 0000		;	VARTMP2       K  /0000        ; outra var tmp
8014 0000		;	DU_CNT        K  /0000        ;

8016 0300		;	BATCH_UL      K  /0300        ;

8018 0000		;	BATCH         JP /0000        ; inicio da rotina

a01a 800e		;	              LD C_GD         ; formando rotina de GET_DATA
a01c 4016		;	              +  BATCH_UL     ; 
a01e 90da		;	              MM S_GET_DATA   ;

a020 a0d8		;	GET_JOB_SL    SC GET_DATA     ; pega primeiro dado (Expected //)
a022 5000		;	              -  C_DB_SLASH   ;
a024 102a		;	              JZ GET_JOB_ST   ; se é // ok, se nao imprime erro e para
8026 3001		;	              LV /0001
a028 00d0		;	              JP ERROR        ;

a02a a0d8		;	GET_JOB_ST    SC GET_DATA     ; pega o segundo dado (Expected JB)
a02c 5008		;	              -  C_JB         ; 
a02e 1034		;	              JZ GET_CMD      ; se é JB vai para CMD, se nao, impreime erro e para
8030 3001		;	              LV /0001
a032 00d0		;	              JP ERROR        ;

a034 a0d8		;	GET_CMD       SC GET_DATA     ; checa double slash
a036 5000		;	              -  C_DB_SLASH   ;
a038 103e		;	              JZ GET_CMD_2    ;
803a 3002		;	              LV /0002        ;
a03c 00d0		;	              JP ERROR        ;

a03e a0d8		;	GET_CMD_2     SC GET_DATA     ; pega nome do comando
a040 9010		;	              MM VARTMP       ;
a042 500a		;	              -  C_DU         ; vai para DUMP 
a044 1050		;	              JZ DO_THE_DUMP  ;

a046 8010		;	              LD VARTMP       ; 
a048 500c		;	              -  C_LO         ;
a04a 10bc		;	              JZ DO_THE_LOAD  ; vai para o LOAD

804c 3002		;	              LV /0002        ; se nao foi erro
a04e 00d0		;	              JP ERROR        ;

d050 8014		;	DO_THE_DUMP   LD CINCO        ; zerando o contador
a052 9014		;	              MM DU_CNT       ; 
a054 0060		;	              JP DU_LOOP      ; (nao precisa checar db spaces agora)

a056 a0d8		;	DU_PRE_LOOP   SC GET_DATA     ;
a058 5004		;	              -  C_DB_SP      ; checa se o proximo 
a05a 1060		;	              JZ DU_LOOP
805c 3003		;	              LV /0003
a05e 00d0		;	              JP ERROR

a060 a0d8		;	DU_LOOP       SC GET_DATA     ; comeca a pegar os dados do dump
d062 a008		;	              SC CHTOUI       ; transforma de ascii para bin (EX: 3233 -> 0023)
d064 9009		;	              MM DP1          ; 
a066 a0d8		;	              SC GET_DATA     ; pega a segunda parte do dado
d068 a008		;	              SC CHTOUI       ; transforma de ascii para bin
d06a 9010		;	              MM DP2          ; 
d06c a012		;	              SC PACK         ; palavra no acumulador (e em DP3)

a06e 8014		;	              LD DU_CNT       ;
d070 5014		;	              -  CINCO
a072 1084		;	              JZ DU_1_PRM
d074 4013		;	              +  UM
a076 1090		;	              JZ DU_2_PRM
d078 4013		;	              +  UM
a07a 109c		;	              JZ DU_3_PRM
d07c 4013		;	              +  UM
a07e 10a8		;	              JZ DU_4_PRM
d080 4013		;	              +  UM
a082 10b4		;	              JZ DU_5_PRM

a084 8014		;	DU_1_PRM      LD DU_CNT
d086 5013		;	              -  UM 
a088 9014		;	              MM DU_CNT
d08a 8011		;	              LD DP3          ; a palavra a ser salva
d08c 9004		;	              MM DUMP_BL     ; salva no parametro tamanho do dump
a08e 0056		;	              JP DU_PRE_LOOP      ;

a090 8014		;	DU_2_PRM      LD DU_CNT
d092 5013		;	              -  UM 
a094 9014		;	              MM DU_CNT
d096 8011		;	              LD DP3          ; a palavra a ser salva
d098 9001		;	              MM DUMP_INI     ; salva no parametro endereco inicial do dump
a09a 0056		;	              JP DU_PRE_LOOP      ;

a09c 8014		;	DU_3_PRM      LD DU_CNT
d09e 5013		;	              -  UM 
a0a0 9014		;	              MM DU_CNT
d0a2 8011		;	              LD DP3          ; a palavra a ser salva
d0a4 9002		;	              MM DUMP_TAM     ; salva no parametro tamanho do dump
a0a6 0056		;	              JP DU_PRE_LOOP      ;

a0a8 8014		;	DU_4_PRM      LD DU_CNT
d0aa 5013		;	              -  UM 
a0ac 9014		;	              MM DU_CNT
d0ae 8011		;	              LD DP3          ; a palavra a ser salva
d0b0 9005		;	              MM DUMP_EXE     ; salva no parametro tamanho do dump
a0b2 0056		;	              JP DU_PRE_LOOP      ;

d0b4 8011		;	DU_5_PRM      LD DP3              ; a palavra a ser salva
d0b6 9003		;	              MM DUMP_UL          ; salva no parametro tamanho do dump
d0b8 a000		;	              SC DUMPER           ; chama subrotina de dump
a0ba 0034		;	              JP GET_CMD          ; volta a area de comandos


a0bc a0d8		;	DO_THE_LOAD   SC GET_DATA     ; comeca a pegar os dados do dump
d0be a008		;	              SC CHTOUI       ; transforma de ascii para bin (EX: 3233 -> 0023)
d0c0 9009		;	              MM DP1          ; 
a0c2 a0d8		;	              SC GET_DATA     ; pega a segunda parte do dado
d0c4 a008		;	              SC CHTOUI       ; transforma de ascii para bin
d0c6 9010		;	              MM DP2          ; 
d0c8 a012		;	              SC PACK         ; palavra no acumulador (e em DP3)
d0ca 9007		;	              MM LOADER_UL        ; salva no loader UL 
d0cc a006		;	              SC LOADER           ; ihaaaa
a0ce 0034		;	              JP GET_CMD          ;

a0d0 00d4		;	ERROR         JP SHOW_ERROR 
80d2 0001		;	              K  /0001        ; numero da ul do erro * (so por ser preciso passar um parametro)
80d4 f0ee		;	SHOW_ERROR    OS /00EE        ; chama a mensagem de erro

a0d6 b018		;	FIM           RS BATCH        ; retorna

80d8 0000		;	GET_DATA      JP /0000        ; inicio da rotina de GD 
80da 0000		;	S_GET_DATA    K  /0000        ; precisa ser previamente salvo com o comando de GD na UL certa
a0dc 9010		;	              MM VARTMP       ; salva na variavel temporaria
a0de 5002		;	              -  C_EOL        ; ve se é fim de linha, se sim pega o dado de novo
a0e0 10da		;	              JZ S_GET_DATA   ;
a0e2 8010		;	              LD VARTMP       ; recarrega o dado carregado
a0e4 5006		;	              -  C_EOF        ;
a0e6 10d6		;	              JZ FIM          ; retorna a sub rotina do batch caso seja fim do arquivo
a0e8 8010		;	              LD VARTMP       ;
a0ea b0d8		;	              RS GET_DATA     ;

